[build-system]
requires = ["maturin~=1.2.1"]
build-backend = "maturin"

[project]
name = "py-rattler"
requires-python = ">=3.8"
description = "A blazing fast library to work with the conda ecosystem"
readme = "README.md"
authors = [
    { name = "Bas Zalmstra", email = "zalmstra.bas@gmail.com" },
    { name = "Tarun Pratap Singh", email = "pratapsinghtarun9@gmail.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Typing :: Typed",
]
license = "BSD-3-Clause"

[project.urls]
Homepage = "https://github.com/conda/rattler"
Documentation = "https://conda.github.io/rattler/py-rattler/"
Repository = "https://github.com/conda/rattler"
Issues = "https://github.com/conda/rattler/labels/python-bindings"

[tool.maturin]
features = ["pyo3/extension-module"]

[tool.ruff]
line-length = 120
target-version = "py38"

[tool.mypy]
python_version = "3.8"
files = ["rattler", "tests", "examples"]
strict = true
enable_error_code = ["redundant-expr", "truthy-bool", "ignore-without-code"]
disable_error_code = ["empty-body"]

[[tool.mypy.overrides]]
module = ["rattler.rattler"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["rattler.*"]
# We exclude the rattler module from warn_return_any, because the PyO3 api does not have Python
# type annotations. See https://github.com/PyO3/pyo3/issues/1112 for a discussion on adding
# this capability. We could add a stub file for rattler.rattler (the PyO3 api), but that
# amounts to duplicating almost all type annotations on our api, as the Python api itself is a
# thin wrapper around the PyO3 api to start with.
warn_return_any = false
