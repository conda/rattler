on:
  push:
    branches: [main]
  pull_request:
    paths:
      - crates/rattler-bin/**
      - crates/rattler_index/**
      - crates/rattler_upload/**
      - crates/rattler_networking/**
      - .github/workflows/e2e-s3-tests.yml

name: E2E S3 Tests

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_LOG: info
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"
  CARGO_TERM_COLOR: always
  DEFAULT_FEATURES: s3

jobs:
  e2e-minio-test:
    name: E2E Minio Upload/Index/Download Test
    runs-on: ubuntu-latest
    env:
      MINIO_ENDPOINT: http://localhost:9000
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      MINIO_REGION: us-east-1

    steps:
      - name: Checkout source code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: recursive

      - name: Install MinIO + mc, start server, configure bucket
        run: |
          set -euo pipefail
          
          # Paths
          BIN_DIR="$RUNNER_TEMP"
          DATA_DIR="$RUNNER_TEMP/minio-data"
          LOG_FILE="$RUNNER_TEMP/minio.log"
          PID_FILE="$RUNNER_TEMP/minio.pid"
          
          mkdir -p "$BIN_DIR" "$DATA_DIR"
          
          # Download MinIO server and client without sudo; add to PATH
          curl -fsSL -o "$BIN_DIR/minio" https://dl.min.io/server/minio/release/linux-amd64/minio
          curl -fsSL -o "$BIN_DIR/mc" https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x "$BIN_DIR/minio" "$BIN_DIR/mc"
          echo "$BIN_DIR" >> "$GITHUB_PATH"
          
          # Start MinIO in background
          MINIO_ROOT_USER="$MINIO_ACCESS_KEY" \
          MINIO_ROOT_PASSWORD="$MINIO_SECRET_KEY" \
          "$BIN_DIR/minio" server "$DATA_DIR" --address ":9000" > "$LOG_FILE" 2>&1 &
          echo $! > "$PID_FILE"
          
          # Wait for MinIO to be ready
          timeout 120 bash -c 'until curl -fsS http://localhost:9000/minio/health/live >/dev/null; do sleep 2; done'
          
          # Configure mc client and bucket
          "$BIN_DIR/mc" alias set minio http://localhost:9000 "$MINIO_ACCESS_KEY" "$MINIO_SECRET_KEY"
          "$BIN_DIR/mc" mb minio/test-channel || true
          "$BIN_DIR/mc" policy set download minio/test-channel

      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Build rattler binaries
        run: |
          cargo build --bin rattler --release
          cargo build --bin rattler-index --release

      # MinIO client and server are installed and configured above

      - name: Run E2E S3 workflow test with Minio
        run: |
          set -e

          echo "=== Step 1: Upload package to Minio ==="
          ./target/release/rattler upload s3 \
            --channel s3://test-channel \
            --access-key-id "${MINIO_ACCESS_KEY}" \
            --secret-access-key "${MINIO_SECRET_KEY}" \
            --region "${MINIO_REGION}" \
            --endpoint-url "${MINIO_ENDPOINT}" \
            --force-path-style true \
            test-data/packages/empty-0.1.0-h4616a5c_0.conda

          echo "=== Step 2: Index the channel ==="
          ./target/release/rattler-index s3 \
            s3://test-channel \
            --access-key-id "${MINIO_ACCESS_KEY}" \
            --secret-access-key "${MINIO_SECRET_KEY}" \
            --region "${MINIO_REGION}" \
            --endpoint-url "${MINIO_ENDPOINT}" \
            --force-path-style true

          echo "=== Step 3: Test package discovery with dry-run ==="
          ./target/release/rattler create \
            --dry-run \
            -c s3://test-channel \
            empty==0.1.0

          echo "=== E2E test completed successfully ==="

      - name: Debug bucket contents on failure
        if: failure()
        run: |
          echo "=== Minio bucket contents ==="
          mc ls --recursive minio/test-channel || true

      - name: Cleanup
        if: always()
        run: |
          # Stop Minio server (pid written in RUNNER_TEMP)
          if [ -f "$RUNNER_TEMP/minio.pid" ]; then
            kill "$(cat "$RUNNER_TEMP/minio.pid")" || true
            rm -f "$RUNNER_TEMP/minio.pid"
          fi
          
          # Show Minio logs for debugging
          if [ -f "$RUNNER_TEMP/minio.log" ]; then
            echo "=== Minio server logs ==="
            tail -20 "$RUNNER_TEMP/minio.log" || true
          fi
          
          echo "Minio test cleanup completed"

  e2e-aws-s3-test:
    name: E2E Real AWS S3 Upload/Index/Download Test
    runs-on: ubuntu-latest
    # Only run on main branch to avoid creating too many test buckets
    # if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: eu-west-1
      BUCKET: tmp-${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.run_id }}-${{ github.run_attempt }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: recursive

      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a  # v4.3.1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::239378270001:role/conda-rattler-e2e-test

      - name: Generate unique bucket name
        id: bucket
        run: |
          # Create a unique bucket name using repository owner, name, run ID, and attempt number
          aws s3api create-bucket \
            --bucket "${BUCKET}" \
            --create-bucket-configuration LocationConstraint=${AWS_REGION}

          # 1-day auto-expire objects (safety net to ensure we dont retain any files)
          aws s3api put-bucket-lifecycle-configuration --bucket "BUCKET" --lifecycle-configuration '{
            "Rules":[{"ID":"ttl-1d","Status":"Enabled","Expiration":{"Days":1},"Filter":{"Prefix":""}}]
          }'
          
      - name: Build rattler binaries
        run: |
          cargo build --bin rattler --release
          cargo build --bin rattler-index --release

      - name: Run E2E AWS S3 workflow test
        run: |
          set -e

          echo "=== Step 1: Upload package to AWS S3 ==="
          ./target/release/rattler upload s3 \
            --channel s3://${BUCKET} \
            test-data/packages/empty-0.1.0-h4616a5c_0.conda

          echo "=== Step 2: Index the channel ==="
          ./target/release/rattler-index s3 s3://${BUCKET}

          echo "=== Step 3: Test package discovery with dry-run ==="
          ./target/release/rattler create \
            --dry-run \
            -c s3://${BUCKET} \
            empty==0.1.0

          echo "=== AWS S3 E2E test completed successfully ==="

      - name: Debug bucket contents on failure
        if: failure()
        run: |
          echo "=== AWS S3 bucket contents ==="
          aws s3 ls s3://${BUCKET} --recursive || true

      - name: Cleanup AWS S3 bucket
        if: always()
        run: |
          # Remove all objects first
          aws s3 rm s3://${BUCKET} --recursive || true
          # Then delete the bucket
          aws s3 rb s3://${BUCKET} || true
          echo "AWS S3 test cleanup completed"
